import IDictionary.Companion.PATH
import java.io.File
import java.util.*
import javax.swing.JToolBar.Separator

interface IDictionary{
    fun add(word: String):Boolean
    fun find(word: String):Boolean
    fun size():Int

    companion object{
        val PATH="C:\Users\user\Documents\IV EV\android\lab2\src\main\resources\dict.txt"
    }
}

enum class DictionaryType{
    ARRAY_LIST,
    TREE_SET,
    HASH_SET
}

object ListDictionary : IDictionary {
    private val words = mutableListOf<String>()

    init {
        File(PATH).forEachLine { add(it) }
    }

    override fun add(word: String):Boolean{
       return words.add(word)
    }
    override fun find(word: String):Boolean{
        return words.find { it == word } != null}
    override fun size(): Int {
        return words.size
    }
}
object TreeSetDictionary : IDictionary{
    private val words = TreeSet<String>()

    init {
        File(PATH).forEachLine { add(it) }
    }

    override fun add(word: String):Boolean{
        return words.add(word)
    }
    override fun find(word: String):Boolean{
        return words.find { it == word } != null}
    override fun size(): Int {
        return words.size
    }
}

object HashSetDictionary : IDictionary{
    private val words = HashSet<String>()

    init {
        File(PATH).forEachLine { add(it) }
    }

    override fun add(word: String):Boolean{
        return words.add(word)
    }
    override fun find(word: String):Boolean{
        return words.find { it == word } != null}
    override fun size(): Int {
        return words.size
    }
}


class DictionaryProvider{
    companion object{
        fun createDictionary(type: DictionaryType): IDictionary{
            return when(type){
                DictionaryType.ARRAY_LIST ->ListDictionary
                DictionaryType.TREE_SET->TreeSetDictionary
                DictionaryType.HASH_SET->HashSetDictionary
            }
        }
    }
}
fun String.createMonogram(): String {
    return this.split(" ").map{it[0]}.joinToString("")
}

fun List<String>.joinToString(separator: String): String {
    return this.joinToString(separator) { it }
}

fun List<String>.longestString(): String {
    return this.map { it }.maxByOrNull { it }.toString()
}

fun main() {
    //feladat 1
   //val dict: IDictionary = ListDictionary
    //val dict: IDictionary = TreeSetDictionary
   /* val dict: IDictionary = DictionaryProvider.createDictionary(DictionaryType.HASH_SET)
    println("Number of words: ${dict.size()}")
    var word: String?
    while(true){
        print("What to find? ")
        word = readLine()
        if( word.equals("quit")){
            break
        }
        println("Result: ${word?.let { dict.find(it) }}")
    }*/
    //feladat 2
    val stringList = listOf("Whinch", "Eszter","Post","Melon")
    val stringList2 = listOf("apple", "pear", "melon", "banana")
    println("Balint Adolf".createMonogram())

    println(stringList.joinToString("-"))

    println(stringList2.longestString())

}